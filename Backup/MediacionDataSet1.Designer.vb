'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5477
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MediacionDataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MediacionDataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableLitigio As LitigioDataTable
    
    Private tableMediacion As MediacionDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Litigio")) Is Nothing) Then
                MyBase.Tables.Add(New LitigioDataTable(ds.Tables("Litigio")))
            End If
            If (Not (ds.Tables("Mediacion")) Is Nothing) Then
                MyBase.Tables.Add(New MediacionDataTable(ds.Tables("Mediacion")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Litigio() As LitigioDataTable
        Get
            Return Me.tableLitigio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Mediacion() As MediacionDataTable
        Get
            Return Me.tableMediacion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MediacionDataSet1 = CType(MyBase.Clone,MediacionDataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Litigio")) Is Nothing) Then
                MyBase.Tables.Add(New LitigioDataTable(ds.Tables("Litigio")))
            End If
            If (Not (ds.Tables("Mediacion")) Is Nothing) Then
                MyBase.Tables.Add(New MediacionDataTable(ds.Tables("Mediacion")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLitigio = CType(MyBase.Tables("Litigio"),LitigioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLitigio) Is Nothing) Then
                Me.tableLitigio.InitVars
            End If
        End If
        Me.tableMediacion = CType(MyBase.Tables("Mediacion"),MediacionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMediacion) Is Nothing) Then
                Me.tableMediacion.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "MediacionDataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MediacionDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLitigio = New LitigioDataTable
        MyBase.Tables.Add(Me.tableLitigio)
        Me.tableMediacion = New MediacionDataTable
        MyBase.Tables.Add(Me.tableMediacion)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLitigio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMediacion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MediacionDataSet1 = New MediacionDataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub LitigioRowChangeEventHandler(ByVal sender As Object, ByVal e As LitigioRowChangeEvent)
    
    Public Delegate Sub MediacionRowChangeEventHandler(ByVal sender As Object, ByVal e As MediacionRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LitigioDataTable
        Inherits Global.System.Data.TypedTableBase(Of LitigioRow)
        
        Private columnFolio_Litigio As Global.System.Data.DataColumn
        
        Private columnFecha_Asesoria_L As Global.System.Data.DataColumn
        
        Private columnNombre_Solicitante_L As Global.System.Data.DataColumn
        
        Private columnDomicilio_L As Global.System.Data.DataColumn
        
        Private columnColonia_L As Global.System.Data.DataColumn
        
        Private columnMpio_L As Global.System.Data.DataColumn
        
        Private columnEdo_L As Global.System.Data.DataColumn
        
        Private columnTel_Oficina_L As Global.System.Data.DataColumn
        
        Private columnTel_Celular_L As Global.System.Data.DataColumn
        
        Private columnE_mail_L As Global.System.Data.DataColumn
        
        Private columnEdo_Civil_L As Global.System.Data.DataColumn
        
        Private columnOcupacion_L As Global.System.Data.DataColumn
        
        Private columnAsunto_L As Global.System.Data.DataColumn
        
        Private columnMediador_L As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Litigio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Folio_LitigioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio_Litigio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_Asesoria_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Asesoria_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_Solicitante_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_Solicitante_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Colonia_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColonia_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mpio_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMpio_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edo_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdo_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel_Oficina_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel_Oficina_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel_Celular_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel_Celular_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property E_mail_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnE_mail_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edo_Civil_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdo_Civil_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ocupacion_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcupacion_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Asunto_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAsunto_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mediador_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMediador_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LitigioRow
            Get
                Return CType(Me.Rows(index),LitigioRow)
            End Get
        End Property
        
        Public Event LitigioRowChanging As LitigioRowChangeEventHandler
        
        Public Event LitigioRowChanged As LitigioRowChangeEventHandler
        
        Public Event LitigioRowDeleting As LitigioRowChangeEventHandler
        
        Public Event LitigioRowDeleted As LitigioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLitigioRow(ByVal row As LitigioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLitigioRow(ByVal Fecha_Asesoria_L As Date, ByVal Nombre_Solicitante_L As String, ByVal Domicilio_L As String, ByVal Colonia_L As String, ByVal Mpio_L As String, ByVal Edo_L As String, ByVal Tel_Oficina_L As String, ByVal Tel_Celular_L As String, ByVal E_mail_L As String, ByVal Edo_Civil_L As String, ByVal Ocupacion_L As String, ByVal Asunto_L As String, ByVal Mediador_L As String) As LitigioRow
            Dim rowLitigioRow As LitigioRow = CType(Me.NewRow,LitigioRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fecha_Asesoria_L, Nombre_Solicitante_L, Domicilio_L, Colonia_L, Mpio_L, Edo_L, Tel_Oficina_L, Tel_Celular_L, E_mail_L, Edo_Civil_L, Ocupacion_L, Asunto_L, Mediador_L}
            rowLitigioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLitigioRow)
            Return rowLitigioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LitigioDataTable = CType(MyBase.Clone,LitigioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LitigioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFolio_Litigio = MyBase.Columns("Folio_Litigio")
            Me.columnFecha_Asesoria_L = MyBase.Columns("Fecha_Asesoria_L")
            Me.columnNombre_Solicitante_L = MyBase.Columns("Nombre_Solicitante_L")
            Me.columnDomicilio_L = MyBase.Columns("Domicilio_L")
            Me.columnColonia_L = MyBase.Columns("Colonia_L")
            Me.columnMpio_L = MyBase.Columns("Mpio_L")
            Me.columnEdo_L = MyBase.Columns("Edo_L")
            Me.columnTel_Oficina_L = MyBase.Columns("Tel_Oficina_L")
            Me.columnTel_Celular_L = MyBase.Columns("Tel_Celular_L")
            Me.columnE_mail_L = MyBase.Columns("E_mail_L")
            Me.columnEdo_Civil_L = MyBase.Columns("Edo_Civil_L")
            Me.columnOcupacion_L = MyBase.Columns("Ocupacion_L")
            Me.columnAsunto_L = MyBase.Columns("Asunto_L")
            Me.columnMediador_L = MyBase.Columns("Mediador_L")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFolio_Litigio = New Global.System.Data.DataColumn("Folio_Litigio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio_Litigio)
            Me.columnFecha_Asesoria_L = New Global.System.Data.DataColumn("Fecha_Asesoria_L", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Asesoria_L)
            Me.columnNombre_Solicitante_L = New Global.System.Data.DataColumn("Nombre_Solicitante_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_Solicitante_L)
            Me.columnDomicilio_L = New Global.System.Data.DataColumn("Domicilio_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio_L)
            Me.columnColonia_L = New Global.System.Data.DataColumn("Colonia_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColonia_L)
            Me.columnMpio_L = New Global.System.Data.DataColumn("Mpio_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMpio_L)
            Me.columnEdo_L = New Global.System.Data.DataColumn("Edo_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdo_L)
            Me.columnTel_Oficina_L = New Global.System.Data.DataColumn("Tel_Oficina_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel_Oficina_L)
            Me.columnTel_Celular_L = New Global.System.Data.DataColumn("Tel_Celular_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel_Celular_L)
            Me.columnE_mail_L = New Global.System.Data.DataColumn("E_mail_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_mail_L)
            Me.columnEdo_Civil_L = New Global.System.Data.DataColumn("Edo_Civil_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdo_Civil_L)
            Me.columnOcupacion_L = New Global.System.Data.DataColumn("Ocupacion_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcupacion_L)
            Me.columnAsunto_L = New Global.System.Data.DataColumn("Asunto_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAsunto_L)
            Me.columnMediador_L = New Global.System.Data.DataColumn("Mediador_L", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMediador_L)
            Me.columnFolio_Litigio.AutoIncrement = true
            Me.columnFolio_Litigio.AutoIncrementSeed = -1
            Me.columnFolio_Litigio.AutoIncrementStep = -1
            Me.columnFolio_Litigio.AllowDBNull = false
            Me.columnFolio_Litigio.ReadOnly = true
            Me.columnNombre_Solicitante_L.MaxLength = 50
            Me.columnDomicilio_L.MaxLength = 50
            Me.columnColonia_L.MaxLength = 50
            Me.columnMpio_L.MaxLength = 50
            Me.columnEdo_L.MaxLength = 50
            Me.columnTel_Oficina_L.MaxLength = 50
            Me.columnTel_Celular_L.MaxLength = 50
            Me.columnE_mail_L.MaxLength = 50
            Me.columnEdo_Civil_L.MaxLength = 10
            Me.columnOcupacion_L.MaxLength = 50
            Me.columnAsunto_L.MaxLength = 2147483647
            Me.columnMediador_L.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLitigioRow() As LitigioRow
            Return CType(Me.NewRow,LitigioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LitigioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LitigioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LitigioRowChangedEvent) Is Nothing) Then
                RaiseEvent LitigioRowChanged(Me, New LitigioRowChangeEvent(CType(e.Row,LitigioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LitigioRowChangingEvent) Is Nothing) Then
                RaiseEvent LitigioRowChanging(Me, New LitigioRowChangeEvent(CType(e.Row,LitigioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LitigioRowDeletedEvent) Is Nothing) Then
                RaiseEvent LitigioRowDeleted(Me, New LitigioRowChangeEvent(CType(e.Row,LitigioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LitigioRowDeletingEvent) Is Nothing) Then
                RaiseEvent LitigioRowDeleting(Me, New LitigioRowChangeEvent(CType(e.Row,LitigioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLitigioRow(ByVal row As LitigioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MediacionDataSet1 = New MediacionDataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LitigioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MediacionDataTable
        Inherits Global.System.Data.TypedTableBase(Of MediacionRow)
        
        Private columnFolio_Mediacion As Global.System.Data.DataColumn
        
        Private columnFecha_Asesoria_M As Global.System.Data.DataColumn
        
        Private columnNombre_Solicitante_M As Global.System.Data.DataColumn
        
        Private columnDomicilio_M As Global.System.Data.DataColumn
        
        Private columnColonia_M As Global.System.Data.DataColumn
        
        Private columnMpio_M As Global.System.Data.DataColumn
        
        Private columnEdo_M As Global.System.Data.DataColumn
        
        Private columnTel_Oficina_M As Global.System.Data.DataColumn
        
        Private columnTel_Celular_M As Global.System.Data.DataColumn
        
        Private columnE_mail_M As Global.System.Data.DataColumn
        
        Private columnEdo_Civil_M As Global.System.Data.DataColumn
        
        Private columnOcupacion_M As Global.System.Data.DataColumn
        
        Private columnAsunto_M As Global.System.Data.DataColumn
        
        Private columnNombre_Invitado As Global.System.Data.DataColumn
        
        Private columnDomicilio_I As Global.System.Data.DataColumn
        
        Private columnColonia_I As Global.System.Data.DataColumn
        
        Private columnMpio_I As Global.System.Data.DataColumn
        
        Private columnEdo_I As Global.System.Data.DataColumn
        
        Private columnTel_Oficina_I As Global.System.Data.DataColumn
        
        Private columnTel_Celular_I As Global.System.Data.DataColumn
        
        Private columnE_mail_I As Global.System.Data.DataColumn
        
        Private columnEdo_Civil_I As Global.System.Data.DataColumn
        
        Private columnOcupacion_I As Global.System.Data.DataColumn
        
        Private columnMediador_M As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Mediacion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Folio_MediacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio_Mediacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_Asesoria_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Asesoria_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_Solicitante_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_Solicitante_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Colonia_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColonia_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mpio_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMpio_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edo_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdo_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel_Oficina_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel_Oficina_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel_Celular_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel_Celular_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property E_mail_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnE_mail_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edo_Civil_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdo_Civil_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ocupacion_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcupacion_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Asunto_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAsunto_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_InvitadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_Invitado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Colonia_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColonia_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mpio_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMpio_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edo_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdo_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel_Oficina_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel_Oficina_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel_Celular_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel_Celular_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property E_mail_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnE_mail_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edo_Civil_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdo_Civil_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ocupacion_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcupacion_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mediador_MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMediador_M
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MediacionRow
            Get
                Return CType(Me.Rows(index),MediacionRow)
            End Get
        End Property
        
        Public Event MediacionRowChanging As MediacionRowChangeEventHandler
        
        Public Event MediacionRowChanged As MediacionRowChangeEventHandler
        
        Public Event MediacionRowDeleting As MediacionRowChangeEventHandler
        
        Public Event MediacionRowDeleted As MediacionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMediacionRow(ByVal row As MediacionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMediacionRow( _
                    ByVal Fecha_Asesoria_M As Date,  _
                    ByVal Nombre_Solicitante_M As String,  _
                    ByVal Domicilio_M As String,  _
                    ByVal Colonia_M As String,  _
                    ByVal Mpio_M As String,  _
                    ByVal Edo_M As String,  _
                    ByVal Tel_Oficina_M As String,  _
                    ByVal Tel_Celular_M As String,  _
                    ByVal E_mail_M As String,  _
                    ByVal Edo_Civil_M As String,  _
                    ByVal Ocupacion_M As String,  _
                    ByVal Asunto_M As String,  _
                    ByVal Nombre_Invitado As String,  _
                    ByVal Domicilio_I As String,  _
                    ByVal Colonia_I As String,  _
                    ByVal Mpio_I As String,  _
                    ByVal Edo_I As String,  _
                    ByVal Tel_Oficina_I As String,  _
                    ByVal Tel_Celular_I As String,  _
                    ByVal E_mail_I As String,  _
                    ByVal Edo_Civil_I As String,  _
                    ByVal Ocupacion_I As String,  _
                    ByVal Mediador_M As String) As MediacionRow
            Dim rowMediacionRow As MediacionRow = CType(Me.NewRow,MediacionRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fecha_Asesoria_M, Nombre_Solicitante_M, Domicilio_M, Colonia_M, Mpio_M, Edo_M, Tel_Oficina_M, Tel_Celular_M, E_mail_M, Edo_Civil_M, Ocupacion_M, Asunto_M, Nombre_Invitado, Domicilio_I, Colonia_I, Mpio_I, Edo_I, Tel_Oficina_I, Tel_Celular_I, E_mail_I, Edo_Civil_I, Ocupacion_I, Mediador_M}
            rowMediacionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMediacionRow)
            Return rowMediacionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MediacionDataTable = CType(MyBase.Clone,MediacionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MediacionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFolio_Mediacion = MyBase.Columns("Folio_Mediacion")
            Me.columnFecha_Asesoria_M = MyBase.Columns("Fecha_Asesoria_M")
            Me.columnNombre_Solicitante_M = MyBase.Columns("Nombre_Solicitante_M")
            Me.columnDomicilio_M = MyBase.Columns("Domicilio_M")
            Me.columnColonia_M = MyBase.Columns("Colonia_M")
            Me.columnMpio_M = MyBase.Columns("Mpio_M")
            Me.columnEdo_M = MyBase.Columns("Edo_M")
            Me.columnTel_Oficina_M = MyBase.Columns("Tel_Oficina_M")
            Me.columnTel_Celular_M = MyBase.Columns("Tel_Celular_M")
            Me.columnE_mail_M = MyBase.Columns("E_mail_M")
            Me.columnEdo_Civil_M = MyBase.Columns("Edo_Civil_M")
            Me.columnOcupacion_M = MyBase.Columns("Ocupacion_M")
            Me.columnAsunto_M = MyBase.Columns("Asunto_M")
            Me.columnNombre_Invitado = MyBase.Columns("Nombre_Invitado")
            Me.columnDomicilio_I = MyBase.Columns("Domicilio_I")
            Me.columnColonia_I = MyBase.Columns("Colonia_I")
            Me.columnMpio_I = MyBase.Columns("Mpio_I")
            Me.columnEdo_I = MyBase.Columns("Edo_I")
            Me.columnTel_Oficina_I = MyBase.Columns("Tel_Oficina_I")
            Me.columnTel_Celular_I = MyBase.Columns("Tel_Celular_I")
            Me.columnE_mail_I = MyBase.Columns("E_mail_I")
            Me.columnEdo_Civil_I = MyBase.Columns("Edo_Civil_I")
            Me.columnOcupacion_I = MyBase.Columns("Ocupacion_I")
            Me.columnMediador_M = MyBase.Columns("Mediador_M")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFolio_Mediacion = New Global.System.Data.DataColumn("Folio_Mediacion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio_Mediacion)
            Me.columnFecha_Asesoria_M = New Global.System.Data.DataColumn("Fecha_Asesoria_M", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Asesoria_M)
            Me.columnNombre_Solicitante_M = New Global.System.Data.DataColumn("Nombre_Solicitante_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_Solicitante_M)
            Me.columnDomicilio_M = New Global.System.Data.DataColumn("Domicilio_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio_M)
            Me.columnColonia_M = New Global.System.Data.DataColumn("Colonia_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColonia_M)
            Me.columnMpio_M = New Global.System.Data.DataColumn("Mpio_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMpio_M)
            Me.columnEdo_M = New Global.System.Data.DataColumn("Edo_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdo_M)
            Me.columnTel_Oficina_M = New Global.System.Data.DataColumn("Tel_Oficina_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel_Oficina_M)
            Me.columnTel_Celular_M = New Global.System.Data.DataColumn("Tel_Celular_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel_Celular_M)
            Me.columnE_mail_M = New Global.System.Data.DataColumn("E_mail_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_mail_M)
            Me.columnEdo_Civil_M = New Global.System.Data.DataColumn("Edo_Civil_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdo_Civil_M)
            Me.columnOcupacion_M = New Global.System.Data.DataColumn("Ocupacion_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcupacion_M)
            Me.columnAsunto_M = New Global.System.Data.DataColumn("Asunto_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAsunto_M)
            Me.columnNombre_Invitado = New Global.System.Data.DataColumn("Nombre_Invitado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_Invitado)
            Me.columnDomicilio_I = New Global.System.Data.DataColumn("Domicilio_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio_I)
            Me.columnColonia_I = New Global.System.Data.DataColumn("Colonia_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColonia_I)
            Me.columnMpio_I = New Global.System.Data.DataColumn("Mpio_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMpio_I)
            Me.columnEdo_I = New Global.System.Data.DataColumn("Edo_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdo_I)
            Me.columnTel_Oficina_I = New Global.System.Data.DataColumn("Tel_Oficina_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel_Oficina_I)
            Me.columnTel_Celular_I = New Global.System.Data.DataColumn("Tel_Celular_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel_Celular_I)
            Me.columnE_mail_I = New Global.System.Data.DataColumn("E_mail_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_mail_I)
            Me.columnEdo_Civil_I = New Global.System.Data.DataColumn("Edo_Civil_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdo_Civil_I)
            Me.columnOcupacion_I = New Global.System.Data.DataColumn("Ocupacion_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcupacion_I)
            Me.columnMediador_M = New Global.System.Data.DataColumn("Mediador_M", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMediador_M)
            Me.columnFolio_Mediacion.AutoIncrement = true
            Me.columnFolio_Mediacion.AutoIncrementSeed = -1
            Me.columnFolio_Mediacion.AutoIncrementStep = -1
            Me.columnFolio_Mediacion.AllowDBNull = false
            Me.columnFolio_Mediacion.ReadOnly = true
            Me.columnNombre_Solicitante_M.MaxLength = 50
            Me.columnDomicilio_M.MaxLength = 50
            Me.columnColonia_M.MaxLength = 50
            Me.columnMpio_M.MaxLength = 50
            Me.columnEdo_M.MaxLength = 50
            Me.columnTel_Oficina_M.MaxLength = 50
            Me.columnTel_Celular_M.MaxLength = 50
            Me.columnE_mail_M.MaxLength = 50
            Me.columnEdo_Civil_M.MaxLength = 50
            Me.columnOcupacion_M.MaxLength = 50
            Me.columnAsunto_M.MaxLength = 2147483647
            Me.columnNombre_Invitado.MaxLength = 50
            Me.columnDomicilio_I.MaxLength = 50
            Me.columnColonia_I.MaxLength = 50
            Me.columnMpio_I.MaxLength = 50
            Me.columnEdo_I.MaxLength = 50
            Me.columnTel_Oficina_I.MaxLength = 50
            Me.columnTel_Celular_I.MaxLength = 50
            Me.columnE_mail_I.MaxLength = 50
            Me.columnEdo_Civil_I.MaxLength = 50
            Me.columnOcupacion_I.MaxLength = 50
            Me.columnMediador_M.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMediacionRow() As MediacionRow
            Return CType(Me.NewRow,MediacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MediacionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MediacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MediacionRowChangedEvent) Is Nothing) Then
                RaiseEvent MediacionRowChanged(Me, New MediacionRowChangeEvent(CType(e.Row,MediacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MediacionRowChangingEvent) Is Nothing) Then
                RaiseEvent MediacionRowChanging(Me, New MediacionRowChangeEvent(CType(e.Row,MediacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MediacionRowDeletedEvent) Is Nothing) Then
                RaiseEvent MediacionRowDeleted(Me, New MediacionRowChangeEvent(CType(e.Row,MediacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MediacionRowDeletingEvent) Is Nothing) Then
                RaiseEvent MediacionRowDeleting(Me, New MediacionRowChangeEvent(CType(e.Row,MediacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMediacionRow(ByVal row As MediacionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MediacionDataSet1 = New MediacionDataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MediacionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LitigioRow
        Inherits Global.System.Data.DataRow
        
        Private tableLitigio As LitigioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLitigio = CType(Me.Table,LitigioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio_Litigio() As Integer
            Get
                Return CType(Me(Me.tableLitigio.Folio_LitigioColumn),Integer)
            End Get
            Set
                Me(Me.tableLitigio.Folio_LitigioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Asesoria_L() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Fecha_Asesoria_LColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha_Asesoria_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Fecha_Asesoria_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_Solicitante_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Nombre_Solicitante_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre_Solicitante_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Nombre_Solicitante_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Domicilio_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Domicilio_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Colonia_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Colonia_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Colonia_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Colonia_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mpio_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Mpio_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mpio_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Mpio_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edo_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Edo_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Edo_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Edo_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel_Oficina_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Tel_Oficina_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel_Oficina_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Tel_Oficina_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel_Celular_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Tel_Celular_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel_Celular_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Tel_Celular_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property E_mail_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.E_mail_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'E_mail_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.E_mail_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edo_Civil_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Edo_Civil_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Edo_Civil_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Edo_Civil_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ocupacion_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Ocupacion_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ocupacion_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Ocupacion_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Asunto_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Asunto_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Asunto_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Asunto_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mediador_L() As String
            Get
                Try 
                    Return CType(Me(Me.tableLitigio.Mediador_LColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mediador_L' de la tabla 'Litigio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLitigio.Mediador_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_Asesoria_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Fecha_Asesoria_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_Asesoria_LNull()
            Me(Me.tableLitigio.Fecha_Asesoria_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombre_Solicitante_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Nombre_Solicitante_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombre_Solicitante_LNull()
            Me(Me.tableLitigio.Nombre_Solicitante_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Domicilio_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio_LNull()
            Me(Me.tableLitigio.Domicilio_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColonia_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Colonia_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColonia_LNull()
            Me(Me.tableLitigio.Colonia_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMpio_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Mpio_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMpio_LNull()
            Me(Me.tableLitigio.Mpio_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdo_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Edo_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdo_LNull()
            Me(Me.tableLitigio.Edo_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel_Oficina_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Tel_Oficina_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel_Oficina_LNull()
            Me(Me.tableLitigio.Tel_Oficina_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel_Celular_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Tel_Celular_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel_Celular_LNull()
            Me(Me.tableLitigio.Tel_Celular_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsE_mail_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.E_mail_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetE_mail_LNull()
            Me(Me.tableLitigio.E_mail_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdo_Civil_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Edo_Civil_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdo_Civil_LNull()
            Me(Me.tableLitigio.Edo_Civil_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcupacion_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Ocupacion_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcupacion_LNull()
            Me(Me.tableLitigio.Ocupacion_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAsunto_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Asunto_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAsunto_LNull()
            Me(Me.tableLitigio.Asunto_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMediador_LNull() As Boolean
            Return Me.IsNull(Me.tableLitigio.Mediador_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMediador_LNull()
            Me(Me.tableLitigio.Mediador_LColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MediacionRow
        Inherits Global.System.Data.DataRow
        
        Private tableMediacion As MediacionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMediacion = CType(Me.Table,MediacionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio_Mediacion() As Integer
            Get
                Return CType(Me(Me.tableMediacion.Folio_MediacionColumn),Integer)
            End Get
            Set
                Me(Me.tableMediacion.Folio_MediacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Asesoria_M() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Fecha_Asesoria_MColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha_Asesoria_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Fecha_Asesoria_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_Solicitante_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Nombre_Solicitante_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre_Solicitante_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Nombre_Solicitante_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Domicilio_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Domicilio_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Colonia_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Colonia_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Colonia_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Colonia_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mpio_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Mpio_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mpio_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Mpio_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edo_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Edo_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Edo_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Edo_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel_Oficina_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Tel_Oficina_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel_Oficina_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Tel_Oficina_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel_Celular_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Tel_Celular_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel_Celular_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Tel_Celular_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property E_mail_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.E_mail_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'E_mail_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.E_mail_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edo_Civil_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Edo_Civil_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Edo_Civil_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Edo_Civil_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ocupacion_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Ocupacion_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ocupacion_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Ocupacion_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Asunto_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Asunto_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Asunto_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Asunto_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_Invitado() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Nombre_InvitadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre_Invitado' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Nombre_InvitadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Domicilio_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Domicilio_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Colonia_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Colonia_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Colonia_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Colonia_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mpio_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Mpio_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mpio_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Mpio_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edo_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Edo_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Edo_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Edo_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel_Oficina_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Tel_Oficina_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel_Oficina_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Tel_Oficina_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel_Celular_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Tel_Celular_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel_Celular_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Tel_Celular_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property E_mail_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.E_mail_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'E_mail_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.E_mail_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edo_Civil_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Edo_Civil_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Edo_Civil_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Edo_Civil_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ocupacion_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Ocupacion_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ocupacion_I' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Ocupacion_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mediador_M() As String
            Get
                Try 
                    Return CType(Me(Me.tableMediacion.Mediador_MColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mediador_M' de la tabla 'Mediacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMediacion.Mediador_MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_Asesoria_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Fecha_Asesoria_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_Asesoria_MNull()
            Me(Me.tableMediacion.Fecha_Asesoria_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombre_Solicitante_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Nombre_Solicitante_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombre_Solicitante_MNull()
            Me(Me.tableMediacion.Nombre_Solicitante_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Domicilio_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio_MNull()
            Me(Me.tableMediacion.Domicilio_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColonia_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Colonia_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColonia_MNull()
            Me(Me.tableMediacion.Colonia_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMpio_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Mpio_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMpio_MNull()
            Me(Me.tableMediacion.Mpio_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdo_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Edo_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdo_MNull()
            Me(Me.tableMediacion.Edo_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel_Oficina_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Tel_Oficina_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel_Oficina_MNull()
            Me(Me.tableMediacion.Tel_Oficina_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel_Celular_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Tel_Celular_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel_Celular_MNull()
            Me(Me.tableMediacion.Tel_Celular_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsE_mail_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.E_mail_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetE_mail_MNull()
            Me(Me.tableMediacion.E_mail_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdo_Civil_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Edo_Civil_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdo_Civil_MNull()
            Me(Me.tableMediacion.Edo_Civil_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcupacion_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Ocupacion_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcupacion_MNull()
            Me(Me.tableMediacion.Ocupacion_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAsunto_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Asunto_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAsunto_MNull()
            Me(Me.tableMediacion.Asunto_MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombre_InvitadoNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Nombre_InvitadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombre_InvitadoNull()
            Me(Me.tableMediacion.Nombre_InvitadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Domicilio_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio_INull()
            Me(Me.tableMediacion.Domicilio_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColonia_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Colonia_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColonia_INull()
            Me(Me.tableMediacion.Colonia_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMpio_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Mpio_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMpio_INull()
            Me(Me.tableMediacion.Mpio_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdo_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Edo_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdo_INull()
            Me(Me.tableMediacion.Edo_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel_Oficina_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Tel_Oficina_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel_Oficina_INull()
            Me(Me.tableMediacion.Tel_Oficina_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel_Celular_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Tel_Celular_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel_Celular_INull()
            Me(Me.tableMediacion.Tel_Celular_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsE_mail_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.E_mail_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetE_mail_INull()
            Me(Me.tableMediacion.E_mail_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdo_Civil_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Edo_Civil_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdo_Civil_INull()
            Me(Me.tableMediacion.Edo_Civil_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcupacion_INull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Ocupacion_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcupacion_INull()
            Me(Me.tableMediacion.Ocupacion_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMediador_MNull() As Boolean
            Return Me.IsNull(Me.tableMediacion.Mediador_MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMediador_MNull()
            Me(Me.tableMediacion.Mediador_MColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LitigioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LitigioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LitigioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LitigioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MediacionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MediacionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MediacionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MediacionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MediacionDataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LitigioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Litigio"
            tableMapping.ColumnMappings.Add("Folio_Litigio", "Folio_Litigio")
            tableMapping.ColumnMappings.Add("Fecha_Asesoria_L", "Fecha_Asesoria_L")
            tableMapping.ColumnMappings.Add("Nombre_Solicitante_L", "Nombre_Solicitante_L")
            tableMapping.ColumnMappings.Add("Domicilio_L", "Domicilio_L")
            tableMapping.ColumnMappings.Add("Colonia_L", "Colonia_L")
            tableMapping.ColumnMappings.Add("Mpio_L", "Mpio_L")
            tableMapping.ColumnMappings.Add("Edo_L", "Edo_L")
            tableMapping.ColumnMappings.Add("Tel_Oficina_L", "Tel_Oficina_L")
            tableMapping.ColumnMappings.Add("Tel_Celular_L", "Tel_Celular_L")
            tableMapping.ColumnMappings.Add("E_mail_L", "E_mail_L")
            tableMapping.ColumnMappings.Add("Edo_Civil_L", "Edo_Civil_L")
            tableMapping.ColumnMappings.Add("Ocupacion_L", "Ocupacion_L")
            tableMapping.ColumnMappings.Add("Asunto_L", "Asunto_L")
            tableMapping.ColumnMappings.Add("Mediador_L", "Mediador_L")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Litigio] ([Fecha_Asesoria_L], [Nombre_Solicitante_L], [Domicil"& _ 
                "io_L], [Colonia_L], [Mpio_L], [Edo_L], [Tel_Oficina_L], [Tel_Celular_L], [E_mail"& _ 
                "_L], [Edo_Civil_L], [Ocupacion_L], [Asunto_L], [Mediador_L]) VALUES (@Fecha_Ases"& _ 
                "oria_L, @Nombre_Solicitante_L, @Domicilio_L, @Colonia_L, @Mpio_L, @Edo_L, @Tel_O"& _ 
                "ficina_L, @Tel_Celular_L, @E_mail_L, @Edo_Civil_L, @Ocupacion_L, @Asunto_L, @Med"& _ 
                "iador_L)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha_Asesoria_L", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Asesoria_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre_Solicitante_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre_Solicitante_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Domicilio_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Domicilio_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Colonia_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Colonia_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mpio_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mpio_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edo_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edo_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tel_Oficina_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel_Oficina_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tel_Celular_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel_Celular_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@E_mail_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E_mail_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edo_Civil_L", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edo_Civil_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ocupacion_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ocupacion_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Asunto_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Asunto_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mediador_L", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mediador_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Mediacion.My.MySettings.Default.MediacionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Folio_Litigio, Fecha_Asesoria_L, Nombre_Solicitante_L, Domicilio_L, Coloni"& _ 
                "a_L, Mpio_L, Edo_L, Tel_Oficina_L, Tel_Celular_L, E_mail_L, Edo_Civil_L, Ocupaci"& _ 
                "on_L, Asunto_L, Mediador_L FROM dbo.Litigio"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MediacionDataSet1.LitigioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MediacionDataSet1.LitigioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MediacionDataSet1.LitigioDataTable = New MediacionDataSet1.LitigioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MediacionDataSet1.LitigioDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MediacionDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "Litigio")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Fecha_Asesoria_L As Global.System.Nullable(Of Date), ByVal Nombre_Solicitante_L As String, ByVal Domicilio_L As String, ByVal Colonia_L As String, ByVal Mpio_L As String, ByVal Edo_L As String, ByVal Tel_Oficina_L As String, ByVal Tel_Celular_L As String, ByVal E_mail_L As String, ByVal Edo_Civil_L As String, ByVal Ocupacion_L As String, ByVal Asunto_L As String, ByVal Mediador_L As String) As Integer
            If (Fecha_Asesoria_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Fecha_Asesoria_L.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Nombre_Solicitante_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Nombre_Solicitante_L,String)
            End If
            If (Domicilio_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Domicilio_L,String)
            End If
            If (Colonia_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Colonia_L,String)
            End If
            If (Mpio_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Mpio_L,String)
            End If
            If (Edo_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Edo_L,String)
            End If
            If (Tel_Oficina_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Tel_Oficina_L,String)
            End If
            If (Tel_Celular_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Tel_Celular_L,String)
            End If
            If (E_mail_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(E_mail_L,String)
            End If
            If (Edo_Civil_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Edo_Civil_L,String)
            End If
            If (Ocupacion_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Ocupacion_L,String)
            End If
            If (Asunto_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Asunto_L,String)
            End If
            If (Mediador_L Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Mediador_L,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MediacionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Mediacion"
            tableMapping.ColumnMappings.Add("Folio_Mediacion", "Folio_Mediacion")
            tableMapping.ColumnMappings.Add("Fecha_Asesoria_M", "Fecha_Asesoria_M")
            tableMapping.ColumnMappings.Add("Nombre_Solicitante_M", "Nombre_Solicitante_M")
            tableMapping.ColumnMappings.Add("Domicilio_M", "Domicilio_M")
            tableMapping.ColumnMappings.Add("Colonia_M", "Colonia_M")
            tableMapping.ColumnMappings.Add("Mpio_M", "Mpio_M")
            tableMapping.ColumnMappings.Add("Edo_M", "Edo_M")
            tableMapping.ColumnMappings.Add("Tel_Oficina_M", "Tel_Oficina_M")
            tableMapping.ColumnMappings.Add("Tel_Celular_M", "Tel_Celular_M")
            tableMapping.ColumnMappings.Add("E_mail_M", "E_mail_M")
            tableMapping.ColumnMappings.Add("Edo_Civil_M", "Edo_Civil_M")
            tableMapping.ColumnMappings.Add("Ocupacion_M", "Ocupacion_M")
            tableMapping.ColumnMappings.Add("Asunto_M", "Asunto_M")
            tableMapping.ColumnMappings.Add("Nombre_Invitado", "Nombre_Invitado")
            tableMapping.ColumnMappings.Add("Domicilio_I", "Domicilio_I")
            tableMapping.ColumnMappings.Add("Colonia_I", "Colonia_I")
            tableMapping.ColumnMappings.Add("Mpio_I", "Mpio_I")
            tableMapping.ColumnMappings.Add("Edo_I", "Edo_I")
            tableMapping.ColumnMappings.Add("Tel_Oficina_I", "Tel_Oficina_I")
            tableMapping.ColumnMappings.Add("Tel_Celular_I", "Tel_Celular_I")
            tableMapping.ColumnMappings.Add("E_mail_I", "E_mail_I")
            tableMapping.ColumnMappings.Add("Edo_Civil_I", "Edo_Civil_I")
            tableMapping.ColumnMappings.Add("Ocupacion_I", "Ocupacion_I")
            tableMapping.ColumnMappings.Add("Mediador_M", "Mediador_M")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Mediacion] ([Fecha_Asesoria_M], [Nombre_Solicitante_M], [Domic"& _ 
                "ilio_M], [Colonia_M], [Mpio_M], [Edo_M], [Tel_Oficina_M], [Tel_Celular_M], [E_ma"& _ 
                "il_M], [Edo_Civil_M], [Ocupacion_M], [Asunto_M], [Nombre_Invitado], [Domicilio_I"& _ 
                "], [Colonia_I], [Mpio_I], [Edo_I], [Tel_Oficina_I], [Tel_Celular_I], [E_mail_I],"& _ 
                " [Edo_Civil_I], [Ocupacion_I], [Mediador_M]) VALUES (@Fecha_Asesoria_M, @Nombre_"& _ 
                "Solicitante_M, @Domicilio_M, @Colonia_M, @Mpio_M, @Edo_M, @Tel_Oficina_M, @Tel_C"& _ 
                "elular_M, @E_mail_M, @Edo_Civil_M, @Ocupacion_M, @Asunto_M, @Nombre_Invitado, @D"& _ 
                "omicilio_I, @Colonia_I, @Mpio_I, @Edo_I, @Tel_Oficina_I, @Tel_Celular_I, @E_mail"& _ 
                "_I, @Edo_Civil_I, @Ocupacion_I, @Mediador_M)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha_Asesoria_M", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Asesoria_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre_Solicitante_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre_Solicitante_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Domicilio_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Domicilio_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Colonia_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Colonia_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mpio_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mpio_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edo_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edo_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tel_Oficina_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel_Oficina_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tel_Celular_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel_Celular_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@E_mail_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E_mail_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edo_Civil_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edo_Civil_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ocupacion_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ocupacion_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Asunto_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Asunto_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre_Invitado", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre_Invitado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Domicilio_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Domicilio_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Colonia_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Colonia_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mpio_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mpio_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edo_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edo_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tel_Oficina_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel_Oficina_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tel_Celular_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tel_Celular_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@E_mail_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "E_mail_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edo_Civil_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edo_Civil_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ocupacion_I", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ocupacion_I", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mediador_M", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mediador_M", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Mediacion.My.MySettings.Default.MediacionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Folio_Mediacion, Fecha_Asesoria_M, Nombre_Solicitante_M, Domicilio_M, Colo"& _ 
                "nia_M, Mpio_M, Edo_M, Tel_Oficina_M, Tel_Celular_M, E_mail_M, Edo_Civil_M, Ocupa"& _ 
                "cion_M, Asunto_M, Nombre_Invitado, Domicilio_I, Colonia_I, Mpio_I, Edo_I, Tel_Of"& _ 
                "icina_I, Tel_Celular_I, E_mail_I, Edo_Civil_I, Ocupacion_I, Mediador_M FROM dbo."& _ 
                "Mediacion"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MediacionDataSet1.MediacionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MediacionDataSet1.MediacionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MediacionDataSet1.MediacionDataTable = New MediacionDataSet1.MediacionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MediacionDataSet1.MediacionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MediacionDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "Mediacion")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Fecha_Asesoria_M As Global.System.Nullable(Of Date),  _
                    ByVal Nombre_Solicitante_M As String,  _
                    ByVal Domicilio_M As String,  _
                    ByVal Colonia_M As String,  _
                    ByVal Mpio_M As String,  _
                    ByVal Edo_M As String,  _
                    ByVal Tel_Oficina_M As String,  _
                    ByVal Tel_Celular_M As String,  _
                    ByVal E_mail_M As String,  _
                    ByVal Edo_Civil_M As String,  _
                    ByVal Ocupacion_M As String,  _
                    ByVal Asunto_M As String,  _
                    ByVal Nombre_Invitado As String,  _
                    ByVal Domicilio_I As String,  _
                    ByVal Colonia_I As String,  _
                    ByVal Mpio_I As String,  _
                    ByVal Edo_I As String,  _
                    ByVal Tel_Oficina_I As String,  _
                    ByVal Tel_Celular_I As String,  _
                    ByVal E_mail_I As String,  _
                    ByVal Edo_Civil_I As String,  _
                    ByVal Ocupacion_I As String,  _
                    ByVal Mediador_M As String) As Integer
            If (Fecha_Asesoria_M.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Fecha_Asesoria_M.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Nombre_Solicitante_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Nombre_Solicitante_M,String)
            End If
            If (Domicilio_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Domicilio_M,String)
            End If
            If (Colonia_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Colonia_M,String)
            End If
            If (Mpio_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Mpio_M,String)
            End If
            If (Edo_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Edo_M,String)
            End If
            If (Tel_Oficina_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Tel_Oficina_M,String)
            End If
            If (Tel_Celular_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Tel_Celular_M,String)
            End If
            If (E_mail_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(E_mail_M,String)
            End If
            If (Edo_Civil_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Edo_Civil_M,String)
            End If
            If (Ocupacion_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Ocupacion_M,String)
            End If
            If (Asunto_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Asunto_M,String)
            End If
            If (Nombre_Invitado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Nombre_Invitado,String)
            End If
            If (Domicilio_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Domicilio_I,String)
            End If
            If (Colonia_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Colonia_I,String)
            End If
            If (Mpio_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Mpio_I,String)
            End If
            If (Edo_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Edo_I,String)
            End If
            If (Tel_Oficina_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Tel_Oficina_I,String)
            End If
            If (Tel_Celular_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Tel_Celular_I,String)
            End If
            If (E_mail_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(E_mail_I,String)
            End If
            If (Edo_Civil_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Edo_Civil_I,String)
            End If
            If (Ocupacion_I Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Ocupacion_I,String)
            End If
            If (Mediador_M Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Mediador_M,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _litigioTableAdapter As LitigioTableAdapter
        
        Private _mediacionTableAdapter As MediacionTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LitigioTableAdapter() As LitigioTableAdapter
            Get
                Return Me._litigioTableAdapter
            End Get
            Set
                Me._litigioTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MediacionTableAdapter() As MediacionTableAdapter
            Get
                Return Me._mediacionTableAdapter
            End Get
            Set
                Me._mediacionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._litigioTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._litigioTableAdapter.Connection) Is Nothing)) Then
                    Return Me._litigioTableAdapter.Connection
                End If
                If ((Not (Me._mediacionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mediacionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mediacionTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._litigioTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mediacionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As MediacionDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mediacionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Mediacion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mediacionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._litigioTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Litigio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._litigioTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As MediacionDataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mediacionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Mediacion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mediacionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._litigioTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Litigio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._litigioTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As MediacionDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._litigioTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Litigio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._litigioTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mediacionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Mediacion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mediacionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As MediacionDataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._litigioTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._litigioTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._mediacionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mediacionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._litigioTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._litigioTableAdapter, Me._litigioTableAdapter.Connection)
                    Me._litigioTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._litigioTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._litigioTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._litigioTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._litigioTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mediacionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mediacionTableAdapter, Me._mediacionTableAdapter.Connection)
                    Me._mediacionTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mediacionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mediacionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mediacionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mediacionTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._litigioTableAdapter) Is Nothing) Then
                    Me._litigioTableAdapter.Connection = CType(revertConnections(Me._litigioTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._litigioTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mediacionTableAdapter) Is Nothing) Then
                    Me._mediacionTableAdapter.Connection = CType(revertConnections(Me._mediacionTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mediacionTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
